START = graph ;
EVAL = "/* eval code */" ;
graph -> "strict"? ("graph" | "digraph") id? "leftBrace" stmtList "rightBrace" ;
stmtList -> (stmt  "semicolon"?)* ;
stmt -> nodeStmt | edgeStmt | attrStmt | id "equal" id | subgraph ;
attrStmt -> ("graph" | "node" | "edge") attrList ;
attrList -> ("leftBracket" aList? "rightBracket")+ ;
aList -> (id "equal" id ("semicolon" | "comma")?)+ ;
edgeStmt -> (nodeId | subgraph) edgeRHS attrList? ;
edgeRHS -> (edgeop (nodeId | subgraph))+ ;
edgeop -> "arrow" | "dash" ;
nodeStmt -> nodeId attrList? ;
nodeId -> id port? ;
port -> "colon" id ("colon" compassPt)? | "colon" compassPt ;
subgraph -> ("subgraph" id?)? "leftBrace" stmtList "rightBrace" ;
compassPt -> ("n" | "ne" | "e" | "se" | "s" | "sw" | "w" | "nw" | "c" | "underscore") ;
id : "String" ;
